// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Data.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    [Migration("20200506143034_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("mhe")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Common.Models.Location.Location", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("col")
                        .HasColumnType("integer");

                    b.Property<bool>("enabled")
                        .HasColumnType("boolean");

                    b.Property<int?>("frontLocationId")
                        .HasColumnType("integer");

                    b.Property<bool>("isBackLocation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("locationGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("locationHeight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("zoneId")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("plcId")
                        .IsRequired()
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("rack")
                        .HasColumnType("text");

                    b.Property<int?>("row")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("frontLocationId");

                    b.HasIndex("locationGroupId");

                    b.HasIndex("zoneId");

                    b.HasIndex("plcId")
                        .IsUnique();

                    b.ToTable("Locations","mhe");
                });

            modelBuilder.Entity("Common.Models.Location.LocationGroup", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("LocationGroups","mhe");
                });

            modelBuilder.Entity("Common.Models.Location.Zone", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("function")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("temperatureRegime")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);
                    
                    b.Property<string>("plcGateId")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("id");

                    b.ToTable("Zones","mhe");
                });

            modelBuilder.Entity("Common.Models.Location.Route", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("deviceId")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("isDefaultRoute")
                        .HasColumnType("boolean");

                    b.Property<int?>("locationId")
                        .HasColumnType("integer");

                    b.Property<int?>("locationTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("routeCost")
                        .HasColumnType("integer");

                    b.Property<int?>("routedLocationId")
                        .HasColumnType("integer");

                    b.Property<int?>("routedLocationTypeId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("locationId");

                    b.HasIndex("locationTypeId");

                    b.HasIndex("routedLocationId");

                    b.HasIndex("routedLocationTypeId");

                    b.ToTable("Routes","mhe");

                    b.HasCheckConstraint("Constraint_OneSourceNotNull", "NOT ((\"Routes\".\"locationId\" IS NULL) AND (\"Routes\".\"locationTypeId\" IS NULL))");

                    b.HasCheckConstraint("Constraint_OneDestNotNull", "NOT ((\"Routes\".\"routedLocationId\" IS NULL) AND (\"Routes\".\"routedLocationTypeId\" IS NULL))");
                });

            modelBuilder.Entity("Common.Models.Tote", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("locationId")
                        .HasColumnType("integer");

                    b.Property<int?>("requestedLocationId")
                        .HasColumnType("integer");

                    b.Property<int>("storageLocationId")
                        .HasColumnType("integer");

                    b.Property<string>("toteBarcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("typeId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("locationId")
                        .IsUnique();

                    b.HasIndex("requestedLocationId");

                    b.HasIndex("storageLocationId");

                    b.HasIndex("toteBarcode")
                        .IsUnique();

                    b.HasIndex("typeId");

                    b.ToTable("Totes","mhe");
                });

            modelBuilder.Entity("Common.Models.ToteType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("toteHeight")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("totePartitioning")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("ToteTypes","mhe");
                });

            modelBuilder.Entity("Common.Models.Location.Location", b =>
                {
                    b.HasOne("Common.Models.Location.Location", "frontLocation")
                        .WithMany()
                        .HasForeignKey("frontLocationId")
                        .HasConstraintName("ForeignKey_Location_FrontLocation");

                    b.HasOne("Common.Models.Location.LocationGroup", "locationGroup")
                        .WithMany()
                        .HasForeignKey("locationGroupId")
                        .HasConstraintName("ForeignKey_Location_LocationGroup");

                    b.HasOne("Common.Models.Location.Zone", "zone")
                        .WithMany()
                        .HasForeignKey("zoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Models.Location.Route", b =>
                {
                    b.HasOne("Common.Models.Location.Location", "location")
                        .WithMany()
                        .HasForeignKey("locationId")
                        .HasConstraintName("ForeignKey_Location");

                    b.HasOne("Common.Models.Location.LocationGroup", "LocationGroup")
                        .WithMany()
                        .HasForeignKey("locationTypeId")
                        .HasConstraintName("ForeignKey_LocationType");

                    b.HasOne("Common.Models.Location.Location", "routedLocation")
                        .WithMany()
                        .HasForeignKey("routedLocationId")
                        .HasConstraintName("ForeignKey_RoutedLocation");

                    b.HasOne("Common.Models.Location.LocationGroup", "RoutedLocationGroup")
                        .WithMany()
                        .HasForeignKey("routedLocationTypeId")
                        .HasConstraintName("ForeignKey_RoutedLocationType");
                });

            modelBuilder.Entity("Common.Models.Tote", b =>
                {
                    b.HasOne("Common.Models.Location.Location", "location")
                        .WithOne("storedTote")
                        .HasForeignKey("Common.Models.Tote", "locationId")
                        .HasConstraintName("ForeignKey_Tote_Location");

                    b.HasOne("Common.Models.Location.Location", "requestedLocation")
                        .WithMany()
                        .HasForeignKey("requestedLocationId")
                        .HasConstraintName("ForeignKey_Tote_RequestedLocation");

                    b.HasOne("Common.Models.Location.Location", "storageLocation")
                        .WithMany()
                        .HasForeignKey("storageLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.ToteType", "type")
                        .WithMany()
                        .HasForeignKey("typeId")
                        .HasConstraintName("ForeignKey_Tote_ToteType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
